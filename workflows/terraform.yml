name: Terraform CI/CD

# You can still auto-run on push, or just trigger manually
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Which environment to deploy'
        required: true
        default: staging
        type: choice
        options:
          - dev
          - staging
          - prod
  push:
    branches:
      - main

permissions:
  contents: read    # for checkout
  id-token: write   # for OIDC login

jobs:
  terraform:
    runs-on: ubuntu-latest

    # make the chosen env available everywhere
    env:
      TF_ENV: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          only-use-federated-credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        # each env has its own tfstate under `<env>/terraform.tfstate`
        run: terraform init \
                -backend-config="key=${{ env.TF_ENV }}tfstate.tfstate"

      - name: Terraform Plan
        # picks up env/<env>.tfvars and writes plan to tfplan-<env>
        run: terraform plan \
               -var-file="env/${{ env.TF_ENV }}.tfvars" \
               -out="tfplan-${{ env.TF_ENV }}"

      - name: Terraform Apply
        if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
        # only auto-apply for manual runs or on main branch
        run: terraform apply -auto-approve "tfplan-${{ env.TF_ENV }}"

